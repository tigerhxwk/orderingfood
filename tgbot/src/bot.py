import logging

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ( ApplicationBuilder,
        ContextTypes,
        CommandHandler,
        filters,
        MessageHandler,
        CallbackQueryHandler,
        ConversationHandler
)

from datetime import datetime

WARNING_STRING = "–ü–æ–∫–∞ —á—Ç–æ —Ç—É—Ç –≤—Å–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üßë‚Äçüíª, –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å"
TIME_LIMIT_STRING = "–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –¥–æ 11:30 —É—Ç—Ä–∞."
UNKNOWN_CMD_STRING = "–Ø —Ç–∞–∫–æ–µ –Ω–µ –∑–Ω–∞—é üòê"

api_file = open ("../http_api.key", "r")
api_token = api_file.read().replace('\n', '')

updater = Update(api_token)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger("actionlogger")
logger.setLevel(logging.DEBUG)
handler = logging.FileHandler(f"{__name__}.log", mode='w')
formatter = logging.Formatter("%(name)s %(asctime)s %(levelname)s %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

    query = update.callback_query
    await query.answer()


    logger.debug (f"user selected {query.data}")
    await query.edit_message_text(text=WARNING_STRING)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

    logger.debug (f"user {update.message.chat.username} requested menu")
    keyboard = [
        [
            InlineKeyboardButton("–ë–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–∏", callback_data="business_lunch"),
            InlineKeyboardButton("–•–æ–ª–æ–¥–Ω—ã–µ –±–ª—é–¥–∞", callback_data="cold_meal"),
        ],
        [
            InlineKeyboardButton("–°—É–ø—ã", callback_data="soups"),
            InlineKeyboardButton("–í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞", callback_data="second_meal"),
        ],
        [
            InlineKeyboardButton("–ì–∞—Ä–Ω–∏—Ä—ã", callback_data="garnish"),
            InlineKeyboardButton("–ù–∞–ø–∏—Ç–∫–∏", callback_data="beverages"),
        ],
        [
            InlineKeyboardButton("–°—É—à–∏, —Ä–æ–ª–ª—ã, –≤–æ–∫, –ø–∞—Å—Ç–∞", callback_data="asian"),
            InlineKeyboardButton("–í—ã–ø–µ—á–∫–∞", callback_data="bakery"),
        ],
        [
            InlineKeyboardButton("–¢–æ—Ä—Ç", callback_data="cake"),
            InlineKeyboardButton("–ü–∏—Ü—Ü–∞", callback_data="pizza"),
            InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞–∫", callback_data="breakfast"),
        ],
        [
            InlineKeyboardButton("–•–ª–µ–±, —Å–æ—É—Å—ã, –¥–æ–±–∞–≤–∫–∏", callback_data="bread"),
            InlineKeyboardButton("–ë–ª–∏–Ω—ã, —Å—ã—Ä–Ω–∏–∫–∏, –≤–∞—Ä–µ–Ω–∏–∫–∏", callback_data="pancakes"),
        ],
        [InlineKeyboardButton("–ù–∏—á–µ–≥–æ", callback_data="nothing")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–í—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.chat.username
    chatId = chat_id=update.effective_chat.id
    time = datetime.now()
    logger.debug (f"{time} user {username} started conversation")
    currentTime = time.strftime("%H:%M")
    await context.bot.send_message(chatId, text=(f"–ü—Ä–∏–≤–µ—Ç, {username}!"))
    await context.bot.send_message(chatId, text=TIME_LIMIT_STRING + (" –°–µ–π—á–∞—Å %s\n" % currentTime) +  "–ü–æ—Å–º–æ—Ç—Ä–∏—à—å /menu?")

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text=UNKNOWN_CMD_STRING)

if __name__ == '__main__':

    application = ApplicationBuilder().token(api_token).build()


    start_handler = CommandHandler('start', start)
    application.add_handler(start_handler)

    menu_handler = CommandHandler('menu', menu)
    application.add_handler(menu_handler)

    unknown_handler = MessageHandler(filters.COMMAND, unknown)
    application.add_handler(unknown_handler)

    application.add_handler(CallbackQueryHandler(button))

    application.run_polling()
